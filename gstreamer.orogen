# frozen_string_literal: true

name "gstreamer"

using_library "base-logging", typekit: false
using_library "gstreamer-video-1.0", typekit: false
using_library "gstreamer-app-1.0", typekit: false
using_library "aggregator"

import_types_from "aggregator"
import_types_from "gstreamerTypes.hpp"
import_types_from "std"
import_types_from "base"

OroGen::Spec::Deployment.register_global_initializer(:gstreamer)
if defined?(OroGen::Gen::RTT_CPP::Deployment)
    OroGen::Gen::RTT_CPP::Deployment.register_global_initializer(
        :gstreamer,
        deployment_cmake: <<~GST_DEPLOYMENT_CMAKE,
            orogen_pkg_check_modules(gstreamer_app_1_0 REQUIRED gstreamer-app-1.0)
            include_directories(${gstreamer_app_1_0_INCLUDE_DIRS})
            add_definitions(${gstreamer_app_1_0_CFLAGS_OTHER})
            link_directories(${gstreamer_app_1_0_LIBRARY_DIRS})
            target_link_libraries(<%= deployer.name %> ${gstreamer_app_1_0_LIBRARIES})
        GST_DEPLOYMENT_CMAKE
        global_scope: <<~GST_TOPLEVEL,
            #include <gst/gst.h>
        GST_TOPLEVEL
        init: <<~GST_INIT,
            gst_init(&argc, &argv);
        GST_INIT
        exit: <<~GST_EXIT
            gst_deinit();
        GST_EXIT
    )
end

#
task_context "Task" do
    needs_configuration
    needs_global_initializer :gstreamer

    # TimestampApproximator
    output_port "timestamp_estimator_status",
                "/aggregator/TimestampEstimatorStatus"

    # The GStreamer pipeline
    property "pipeline_initialization_timeout", "base/Time"

    # Timestamp port
    input_port "hardware_timestamps", "/base/Time"

    # The GStreamer pipeline
    property "pipeline", "string"

    # Configuration of Rock input ports to be injected in the pipeline
    property "inputs", "/std/vector</gstreamer/InputConfig>"

    # Configuration of Rock output ports to be attached to the pipeline
    property "outputs", "/std/vector</gstreamer/OutputConfig>"

    # Loss threshold for the timestamp estimator
    property "sample_loss_threshold", "int", 2

    dynamic_input_port(/\w+/, ro_ptr("/base/samples/frame/Frame"))
    dynamic_output_port(/\w+/, ro_ptr("/base/samples/frame/Frame"))

    exception_states :INPUT_FRAME_CHANGED_PARAMETERS, :GSTREAMER_ERROR

    port_driven
end