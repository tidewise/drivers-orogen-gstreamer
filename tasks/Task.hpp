/* Generated from orogen/lib/orogen/templates/tasks/Task.hpp */

#ifndef GSTREAMER_TASK_TASK_HPP
#define GSTREAMER_TASK_TASK_HPP

#include "gstreamer/TaskBase.hpp"

#include <gst/app/gstappsink.h>
#include <gst/app/gstappsrc.h>

namespace gstreamer {
    /*! \class Task
     * \brief Declare a new task context (i.e., a component)
     *
     * The corresponding C++ class can be edited in tasks/Task.hpp and
     * tasks/Task.cpp, and will be put in the gstreamer namespace.
     */
    class Task : public TaskBase
    {
        /** The base class is auto-generated by orogen to define the task's interface
         *
         * It is located in the .orogen/tasks folder
         */
        friend class TaskBase;

    protected:
        typedef base::samples::frame::Frame Frame;
        typedef RTT::extras::ReadOnlyPointer<Frame> ROPtrFrame;
        typedef RTT::InputPort<ROPtrFrame> FrameInputPort;
        typedef RTT::OutputPort<ROPtrFrame> FrameOutputPort;

        template<typename Port>
        struct ConfiguredPort {
            Task& task;
            ROPtrFrame frame;
            Port* port;
            base::samples::frame::frame_mode_t frameMode;

            ConfiguredPort(Task&, Port*, base::samples::frame::frame_mode_t frameMode);
            ConfiguredPort(ConfiguredPort const&) = delete;
            ConfiguredPort(ConfiguredPort&&);
            ~ConfiguredPort();
        };

        struct ConfiguredInput : ConfiguredPort<FrameInputPort> {
            GstElement* appsrc = nullptr;

            ConfiguredInput(GstElement*, Task&, FrameInputPort*, base::samples::frame::frame_mode_t);
        };
        typedef ConfiguredPort<FrameOutputPort> ConfiguredOutput;

        static GstFlowReturn sourcePushSample(GstElement *sink, ConfiguredOutput **data);
        static GstFlowReturn sinkNewSample(GstElement *sink, ConfiguredOutput *data);
        void verifyNoNameCollision();
        GstElement* constructPipeline();

        GstElement* mPipeline = nullptr;
        std::list<ConfiguredInput> mConfiguredInputs;
        std::list<ConfiguredOutput> mConfiguredOutputs;

        void configureInputs(GstElement* pipeline);
        void configureOutputs(GstElement* pipeline);
        bool processInputs();
        bool pushFrame(GstElement* appsrc, Frame const& image);
    public:
        /** TaskContext constructor for Task
         * \param name Name of the task. This name needs to be unique to make
         *             it identifiable via nameservices.
         * \param initial_state The initial TaskState of the TaskContext.
         *                      This is deprecated. It should always be the
         *                      configure state.
         */
        Task(std::string const& name = "gstreamer::Task");

        ~Task();

        /**
         * Hook called when the state machine transitions from PreOperational to
         * Stopped.
         *
         * If the code throws an exception, the transition will be aborted
         * and the component will end in the EXCEPTION state instead
         *
         * @return true if the transition can continue, false otherwise
         */
        bool configureHook();

        /**
         * Hook called when the state machine transition from Stopped to Running
         *
         * If the code throws an exception, the transition will be aborted
         * and the component will end in the EXCEPTION state instead
         *
         * @return true if the transition is successful, false otherwise
         */
        bool startHook();

        /**
         * Hook called on trigger in the Running state
         *
         * When this hook is exactly called depends on the chosen task's activity.
         * For instance, if the task context is declared as periodic in the orogen
         * specification, the task will be called at a fixed period.
         *
         * See Rock's documentation for a list of available triggering mechanisms
         *
         * The error(), exception() and fatal() calls, when called in this hook,
         * allow to get into the associated RunTimeError, Exception and
         * FatalError states.
         */
        void updateHook();

        /**
         * Hook called in the RuntimeError state, under the same conditions than
         * the updateHook
         *
         * Call recover() to go back in the Runtime state.
         */
        void errorHook();

        /**
         * Hook called when the component transitions out of the Running state
         *
         * This is called for any transition out of running, that is the
         * transitions to Stopped, Exception and Fatal
         */
        void stopHook();

        /**
         * Hook called on all transitions to PreOperational
         *
         * This is called for all transitions into PreOperational, that is
         * either from Stopped or Exception
         */
        void cleanupHook();
    };
}

#endif
